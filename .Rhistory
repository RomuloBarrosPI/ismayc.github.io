View(present)
present <- mutate(present, total = boys + girls)
present <- mutate(present, boy_ratio = boys / total)
qplot(x = year, y = boy_ratio, data = present, geom = "line")
?perl
?knitr::perl
purl("01C-experiments.Rmd", "01C.R")
knitr::purl("01C-experiments.Rmd", "01C.R")
getwd()
knitr::purl("/Users/cismay/Google Drive/ismayc.github.io/slides/01-intro/01C-experiments.Rmd", "/Users/cismay/Google Drive/ismayc.github.io/slides/01-intro/01C.R")
?md_document
0.91*0.15
# Chunk 1: setup
# DO NOT ALTER CODE IN THIS CHUNK
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
# Chunk 2
download.file("http://www.openintro.org/stat/data/kobe.RData", destfile = "kobe.RData")
load("kobe.RData")
kobe_streak <- data.frame(length = calc_streak(kobe$basket))
qplot(x = length, data = kobe_streak, geom = "histogram", binwidth = 1)
summary(kobe_streak$length)
kobe_streak <- data.frame(length = calc_streak(kobe$basket))
qplot(x = length, data = kobe_streak, geom = "histogram", binwidth = 1,
color = "black", fill = "blue")
summary(kobe_streak$length)
kobe_streak <- data.frame(length = calc_streak(kobe$basket))
qplot(x = length, data = kobe_streak, geom = "histogram", binwidth = 1,
color = I("black"), fill = I("blue"))
summary(kobe_streak$length)
# DO NOT ALTER CODE IN THIS CHUNK
knitr::opts_chunk$set(echo = TRUE)
library(oilabs)
library(dplyr)
library(ggplot2)
data(kobe)
kobe_streak <- calc_streak(kobe$basket)
qplot(x = kobe_streak, geom = "bar",
color = I("black"), fill = I("blue"))
summary(kobe_streak$length)
kobe_streak <- calc_streak(kobe$basket)
qplot(x = kobe_streak, geom = "bar",
color = I("black"), fill = I("blue"))
summary(kobe_streak)
coin_outcomes <- c("heads", "tails")
set.seed(302)
sim_unfair_coin <- sample(coin_outcomes, size = 100, replace = TRUE,
prob = c(0.2, 0.8))
table(sim_unfair_coin)
unfair_table[1]
coin_outcomes <- c("heads", "tails")
set.seed(302)
sim_unfair_coin <- sample(coin_outcomes, size = 100, replace = TRUE,
prob = c(0.2, 0.8))
unfair_table <- table(sim_unfair_coin)
unfair_table
unfair_table[1]
qplot(x = sim_streak, geom = "bar", binwidth = 1)
summary(sim_streak)
sim_streak <- calc_streak(sim_basket)
shot_outcomes <- c("H", "M")
sim_basket <- sample(shot_outcomes, size = 133, replace = TRUE,
prob = c(0.45, 0.55))
sim_streak <- calc_streak(sim_basket)
qplot(x = sim_streak, geom = "bar", binwidth = 1)
summary(sim_streak)
qplot(x = sim_streak, geom = "bar")
summary(sim_streak)
qplot(x = sim_streak, geom = "bar", color = I("black"), fill = I("blue"))
summary(sim_streak)
treatment <- c(rep("desipramine", 24), rep("lithium", 24), rep("placebo", 24))
relapse <- c(rep("Yes", 10), rep("No", 14), rep("Yes", 18), rep("No", 6),
rep("Yes", 20), rep("No", 4))
cocaine <- data_frame(treatment, relapse)
# Chunk 1: setup
# List of useful packages
pkg <- c("dplyr", "ggplot2", "knitr", "devtools", "printr")
# Check if packages are not installed and assign the
# names of the uninstalled packages to the variable new.pkg
new.pkg <- pkg[!(pkg %in% installed.packages())]
# If there are any packages in the list that aren't installed,
# install them
if (length(new.pkg)) {
install.packages(new.pkg, repos = "http://cran.rstudio.com")
}
if(!require(printr)){
devtools::install_github("yihui/printr")
}
# Load the packages into the current environment
lapply(pkg, library, character.only = TRUE)
# Set number of digits to display
#options(digits = 2)
set.seed(2016)
treatment <- c(rep("desipramine", 24), rep("lithium", 24), rep("placebo", 24))
relapse <- c(rep("Yes", 10), rep("No", 14), rep("Yes", 18), rep("No", 6),
rep("Yes", 20), rep("No", 4))
cocaine <- data_frame(treatment, relapse)
View(cocaine)
treatment <- c(rep("desipramine", 24), rep("lithium", 24), rep("placebo", 24))
relapse <- c(rep("Yes", 10), rep("No", 14), rep("Yes", 18), rep("No", 6),
rep("Yes", 20), rep("No", 4))
relapse <- factor(relapse, levels = c("Yes", "No"))
cocaine <- data_frame(treatment, relapse)
table(treatment, relapse)
?kable
?beamer_presentation
?beamer_presentation
0.3*0.62 + 0.46*0.35 + 0.24*0.58
V <- 0.3*0.62 + 0.46*0.35 + 0.24*0.58
prob <- (0.46 * 0.35) / V
prob
num <- 0.017 * 0.78
num
denom <- num + (0.983*0.1)
denom
num2 <- num / denom
num2
.25 * 14
exp(-1)
exp(-1) + exp(-1)
.3 * .55
.3 - .165
.595 + .165
21/24 - 14/24
gender <- rep(c("M", "F"), each = 24)
promote <- rep(c("Yes", "No"), c(35, 13))
d <- rep(NA, 1000)
for(i in 1:1000) {
newgen <- sample(gender)
tab <- table(newgen, promote)
d[i] <- diff(tab[, 2]/24)
}
hist(d, col = "steelblue", main = "Null Distribution")
abline(v = .29, col = "goldenrod", lwd = 2)
qplot(x = d, color = I("steelblue"), main = "Null Distribution")
library(knitr)
options(digits=2)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
gender <- rep(c("M", "F"), each = 24)
promote <- rep(c("Yes", "No"), c(35, 13))
d <- rep(NA, 1000)
for(i in 1:1000) {
newgen <- sample(gender)
tab <- table(newgen, promote)
d[i] <- diff(tab[, 2]/24)
}
hist(d, col = "steelblue", main = "Null Distribution")
abline(v = .29, col = "goldenrod", lwd = 2)
qplot(x = d, color = I("steelblue"), main = "Null Distribution")
gender <- rep(c("M", "F"), each = 24)
promote <- rep(c("Yes", "No"), c(35, 13))
d <- rep(NA, 1000)
for(i in 1:1000) {
newgen <- sample(gender)
tab <- table(newgen, promote)
d[i] <- diff(tab[, 2]/24)
}
hist(d, col = "steelblue", main = "Null Distribution")
abline(v = .29, col = "goldenrod", lwd = 2)
qplot(x = d, color = I("steelblue"), main = "Null Distribution", bins = 8)
gender <- rep(c("M", "F"), each = 24)
promote <- rep(c("Yes", "No"), c(35, 13))
d <- rep(NA, 1000)
for(i in 1:1000) {
newgen <- sample(gender)
tab <- table(newgen, promote)
d[i] <- diff(tab[, 2]/24)
}
hist(d, col = "steelblue", main = "Null Distribution")
abline(v = .29, col = "goldenrod", lwd = 2)
qplot(x = d, fill = I("steelblue"), main = "Null Distribution", bins = 8)
gender <- rep(c("M", "F"), each = 24)
promote <- rep(c("Yes", "No"), c(35, 13))
d <- rep(NA, 1000)
for(i in 1:1000) {
newgen <- sample(gender)
tab <- table(newgen, promote)
d[i] <- diff(tab[, 2]/24)
}
hist(d, col = "steelblue", main = "Null Distribution")
abline(v = .29, col = "goldenrod", lwd = 2)
qplot(x = d, fill = I("steelblue"), colour = I("black"),
main = "Null Distribution", bins = 8)
gender <- rep(c("M", "F"), each = 24)
promote <- rep(c("Yes", "No"), c(35, 13))
d <- rep(NA, 1000)
for(i in 1:1000) {
newgen <- sample(gender)
tab <- table(newgen, promote)
d[i] <- diff(tab[, 2]/24)
}
hist(d, col = "steelblue", main = "Null Distribution")
abline(v = .29, col = "goldenrod", lwd = 2)
qplot(x = d, fill = I("steelblue"), colour = I("black"),
main = "Null Distribution", bins = 8) +
geom_vline(xintercept = 21/24 - 14/24)
gender <- rep(c("M", "F"), each = 24)
promote <- rep(c("Yes", "No"), c(35, 13))
d <- rep(NA, 1000)
for(i in 1:1000) {
newgen <- sample(gender)
tab <- table(newgen, promote)
d[i] <- diff(tab[, 2]/24)
}
hist(d, col = "steelblue", main = "Null Distribution")
abline(v = .29, col = "goldenrod", lwd = 2)
qplot(x = d, fill = I("steelblue"), colour = I("black"),
main = "Null Distribution", bins = 8) +
geom_vline(xintercept = 21/24 - 14/24, colour = "goldenrod")
gender <- rep(c("M", "F"), each = 24)
promote <- rep(c("Yes", "No"), c(35, 13))
d <- rep(NA, 10000)
for(i in 1:10000) {
newgen <- sample(gender)
tab <- table(newgen, promote)
d[i] <- diff(tab[, 2]/24)
}
hist(d, col = "steelblue", main = "Null Distribution")
abline(v = .29, col = "goldenrod", lwd = 2)
qplot(x = d, fill = I("steelblue"), colour = I("black"),
main = "Null Distribution", bins = 8) +
geom_vline(xintercept = 21/24 - 14/24, colour = "goldenrod")
gender <- rep(c("M", "F"), each = 24)
promote <- rep(c("Yes", "No"), c(35, 13))
d <- rep(NA, 10000)
for(i in 1:10000) {
newgen <- sample(gender)
tab <- table(newgen, promote)
d[i] <- diff(tab[, 2]/24)
}
hist(d, col = "steelblue", main = "Null Distribution")
abline(v = .29, col = "goldenrod", lwd = 2)
.3*.55
options(digits = 999)
options(digits = 22)
exp(-3)*(3^2 / factorial(2))
4.5 * exp(-3)
1 - exp(-3)
0.224 / 0.95
?ggsave
# Chunk 1: setup
library(knitr)
#options(digits=2)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(mosaic)
gender <- rep(c("M", "F"), each = 24)
promote <- rep(c("Yes", "No"), c(35, 13))
D <- rep(NA, 10000)
d_obs <- 21/24 - 14/24
for(i in 1:10000) {
newgen <- sample(gender)
tab <- table(newgen, promote)
D[i] <- diff(tab[, 2]/24)
}
#hist(d, col = "steelblue", main = "Null Distribution")
#abline(v = .29, col = "goldenrod", lwd = 2)
qplot(x = D, fill = I("steelblue"), colour = I("black"),
main = "Null Distribution", bins = 12) +
geom_vline(xintercept = d_obs, colour = "goldenrod")
ggsave("gender_promote.png", device = "png")
getwd()
setwd("/Users/cismay/Google Drive/ismayc.github.io/slides/05")
?knitr::purl
knitr::purl("05B.Rmd", "05B.R")
# load and install packages
pkg <- c("httr", "rjson", "dplyr", "stringr", "devtools", "leaflet")
new.pkg <- pkg[!(pkg %in% installed.packages())]
if (length(new.pkg)) {
install.packages(new.pkg)
}
suppressMessages(library(httr))
suppressMessages(library(rjson))
suppressMessages(library(dplyr))
suppressMessages(library(stringr))
suppressMessages(library(devtools))
suppressMessages(if (!require("leaflet")) devtools::install_github("rstudio/leaflet"))
suppressMessages(library(leaflet))
mean(p_hats$in_tail)
# Chunk 1: setup
library(knitr)
#options(digits=2)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
# Chunk 2: prelim
library(ggplot2)
set.seed(53)
# Chunk 3: sim
library(mosaic)
p_hats <- do(10000) * rflip(n = 75)
head(p_hats)
# Chunk 4: dist
qplot(x = prop, data = p_hats, geom = "histogram",
binwidth = .0135, fill = I("white"), col = I("darkgreen"))
mean(p_hats$in_tail)
p_hats
# Chunk 1: setup
library(knitr)
#options(digits=2)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
# Chunk 2: prelim
library(ggplot2)
set.seed(53)
# Chunk 3: sim
library(mosaic)
p_hats <- do(10000) * rflip(n = 75)
head(p_hats)
# Chunk 4: dist
qplot(x = prop, data = p_hats, geom = "histogram",
binwidth = .0135, fill = I("white"), col = I("darkgreen"))
# Chunk 5: dist2
library(dplyr)
p_hats <-
p_hats %>%
mutate(in_tail = ifelse(prop >= 2/3,
TRUE, FALSE))
qplot(x = prop, data = p_hats, geom = "histogram", fill = in_tail,
binwidth = .0135, fill = I("white"), col = I("darkgreen")) +
theme(legend.position = "none") +
scale_fill_manual(values = c("white", "darkgreen")) +
geom_vline(xintercept = 2/3, col = "deepskyblue")
mean(p_hats$in_tail)
# Chunk 1: setup
library(knitr)
#options(digits=2)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
# Chunk 2: prelim
library(ggplot2)
set.seed(53)
# Chunk 3: sim
library(mosaic)
p_hats <- do(10000) * rflip(n = 75)
head(p_hats)
# Chunk 4: dist
qplot(x = prop, data = p_hats, geom = "histogram",
binwidth = .0135, fill = I("white"), col = I("darkgreen"))
library(dplyr)
p_hats <- p_hats %>%
mutate(in_tail = ifelse(prop >= 2/3, TRUE, FALSE))
qplot(x = prop, data = p_hats, geom = "histogram", fill = in_tail,
binwidth = .0135, fill = I("white"), col = I("darkgreen")) +
theme(legend.position = "none") +
scale_fill_manual(values = c("white", "darkgreen")) +
geom_vline(xintercept = 2/3, col = "deepskyblue")
ggsave("gay_mar_sim.png")
shiny::runGitHub("ProbApp", "ismayc")
?pnorm
pnorm(q = -0.5, mean = 0, sd = 1)
?qnorm
pnorm(p = 0.95, mean = 72.6, sd = 4.78)
1norm(p = 0.95, mean = 72.6, sd = 4.78)
qnorm(p = 0.95, mean = 72.6, sd = 4.78)
input <- rexp(10, 2)
input
input <- rexp(10, 10)
input
input <- rexp(10, 100)
input <- rexp(10, 100)
input
input <- rexp(10, 1/100)
input
input <- round(rexp(10, 100),0)
input
input <- round(rexp(10, 100),1)
input
input <- ceiling(rexp(10, 100))
input
input <- ceiling(rexp(10, 1/100))
input
normal <- rnorm(10, mean = 0, sd = 1)
# Chunk 1
library(ggplot2)
options(digits = 2)
# Chunk 2
input <- c(57, 15, 41, 117, 26, 151, 8, 77, 215, 34)
normal <- rnorm(10, mean = 0, sd = 1)
input
normal
qplot(input)
qplot(input, bins = 5)
qplot(input, bins = 5, col=I("white"))
qplot(input, binwidth = 30, col=I("white"))
qplot(input, binwidth = 20, col=I("white"))
qplot(input, binwidth = 40, col=I("white"))
quantile(input)
qplot(sample = input) + stat_qq()
quantile(input, seq(from = 0, to = 100, by = 10)
quantile(input, seq(from = 0, to = 100, by = 10))
quantile(input, seq(from = 10, to = 100, by = 10))
?quantile
seq(from = 10, to = 100, by = 10)
quantile(input, probs = seq(from = 0.1, to = 1, by = 0.1))
quantile(input, probs = seq(from = 0, to = 1, by = 0.1))
qplot(sample = input) + stat_qq()
quantile(input, probs = seq(from = 0, to = 1, by = 1/9))
quantile(input, probs = seq(from = 0, to = 1, by = 1/(length(input) - 1))
quantile(input, probs = seq(from = 0, to = 1, by = 1/(length(input) - 1)))
quantile(input, probs = seq(from = 0, to = 1, by = 1/(length(input) - 1)))
?qnorm
qnorm(quantiles, mean = 0, sd = 1)
quantiles <- seq(from = 0, to = 1, by = 1/(length(input) - 1))
quantile(input, probs = quantiles)
qnorm(quantiles, mean = 0, sd = 1)
qplot(sample = input) + stat_qq()
install.packages("ggplotly")
devtools::install_github("ropensci/ggplotly")
devtools::install_github("ropensci/plotly")
ggplotly(qplot(sample = input) + stat_qq())
library(ggplot2)
library(plotly)
options(digits = 2)
ggplotly(qplot(sample = input) + stat_qq())
# List of useful packages
pkg <- c("ggplot2", "devtools")
# Check if packages are not installed and assign the
# names of the uninstalled packages to the variable new.pkg
new.pkg <- pkg[!(pkg %in% installed.packages())]
# If there are any packages in the list that aren't installed,
# install them
if (length(new.pkg)) {
install.packages(new.pkg, repos = "http://cran.rstudio.com")
}
if(!require(plotly)){
devtools::install_github("ropensci/plotly")
}
options(digits = 2)
pnorm(-1.546635, 0, 1)
pnorm(-1.000491, 0, 1)
pnorm(-0.6554235, 0, 1)
1/11
qqnorm
quantile(input, 0.061)
?rankit
pnorm(0.6418, 0, 1)
pnorm(1.2672, 0, 1)
quantile(input, probs = seq(from = 0, to = 1, by = 1/9))
quantile(input, 0.061)
nums <- c(65, 75, 16, 22, 43, 40)
ggplotly(qplot(sample = nums) + stat_qq())
norms <- c(−1.2672,   −0.6418,   −0.2016,   0.2016,   0.6418,   1.2672)
norms <- c(-1.2672,   -0.6418,   -0.2016,   0.2016,   0.6418,   1.2672)
pnorm(norms)
quantile(input, c(0.10, 0.26, 0.42, 0.58, 0.74, 0.90))
ggplotly(qqnorm(input))
qqnorm(input)
ggplotly(qplot(sample = input) + stat_qq())
quantiles <- seq(from = 0, to = 1, length = length(input))
quantiles
pnorm(quantiles)
qnorm(quantiles)
qqplot.data <- function (vec) # argument: vector of numbers
{
# following four lines from base R's qqline()
y <- quantile(vec[!is.na(vec)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
d <- data.frame(resids = vec)
ggplot(d, aes(sample = resids)) + stat_qq() + geom_abline(slope = slope, intercept = int)
}
qqplot.data(input)
qqplot.data <- function(vec) # argument: vector of numbers
{
# following four lines from base R's qqline()
y <- quantile(vec[!is.na(vec)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1] - slope * x[1]
d <- data.frame(resids = vec)
qplot(sample = resids) + stat_qq() + geom_abline(slope = slope, intercept = int)
}
qqplot.data(input)
qqplot.data <- function(vec) # argument: vector of numbers
{
# following four lines from base R's qqline()
y <- quantile(vec[!is.na(vec)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1] - slope * x[1]
qplot(sample = vec) + stat_qq() + geom_abline(slope = slope, intercept = int)
}
qqplot.data(input)
qqplot.data <- function(vec) # argument: vector of numbers
{
# following four lines from base R's qqline()
y <- quantile(vec[!is.na(vec)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1] - slope * x[1]
ggplotly(qplot(sample = vec) + stat_qq() + geom_abline(slope = slope, intercept = int))
}
qqplot.data(input)
qqplot_line <- function(vec) # argument: vector of numbers
{
# following four lines from base R's qqline()
y <- quantile(vec, c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1] - slope * x[1]
qplot(sample = vec) +
stat_qq() +
geom_abline(slope = slope, intercept = int, col = "deepskyblue")
}
