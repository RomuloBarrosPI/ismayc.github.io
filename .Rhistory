m1 <- lm(Graduates ~ Poverty, data = poverty)
plot(m1, 1)
# Chunk 9
qplot(x = .fitted, y = .stdresid, data = m1) +
geom_abline(intercept = 0, slope = 0, col = "blue")
# Chunk 10: find-b1
poverty <- read.delim("poverty.txt", header = TRUE)
library(ggplot2)
(p1 <- ggplot(poverty, aes(Poverty, Graduates)) +
xlim(0, 20) +
ylim(75, 96) +
geom_point())
# Chunk 11: find-b1-2
m1 <- lm(Graduates ~ Poverty, data = poverty)
(p2 <- p1 +
geom_abline(intercept = m1$coef[1], slope = m1$coef[2], col = "goldenrod") +
annotate("text", x = 3, y = 87, label = paste("slope = b_1 = ", round(m1$coef[2], 4))))
x_bar <- mean(poverty$Poverty)
y_bar <- mean(poverty$Graduates)
p1 +
geom_vline(xintercept = mean(poverty$Poverty),
col = "steelblue",
lty = 2) +
geom_hline(yintercept = mean(poverty$Graduates),
col = "steelblue",
lty = 2) +
geom_abline(intercept = m1$coef[1], slope = m1$coef[2], col = "goldenrod") +
annotate("text", x = 3, y = 91, label = paste("slope = b_1 =", round(m1$coef[2], 4))) +
annotate("text", x = 14, y = 96, label = paste("x-bar = ", round(x_bar, 2))) +
annotate("text", x = 19, y = 85, label = paste("y-bar = ", round(y_bar, 2)))
x_bar
11.9/89.7
poverty <- read.delim("poverty.txt", header = TRUE) %>% select(-Percent)
head(poverty, 15)
download("http://stat.duke.edu/~mc301/data/vision.csv", destfile = "vision.csv")
download.file("http://stat.duke.edu/~mc301/data/vision.csv", destfile = "vision.csv")
getwd()
#download.file("http://stat.duke.edu/~mc301/data/vision.csv", destfile = "vision.csv")
vision <- read.csv("./slides/11/vision.csv")
download.file("http://stat.duke.edu/~mc301/data/vision.csv", destfile = "./slides/11/vision.csv")
vision <- read.csv("./slides/11/vision.csv")
getwd()
install.packages("ggrepel")
devtools::install_github("slowkow/ggrepel")
# Chunk 1: setup
library(knitr)
options(digits = 3, width = 100)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(dplyr)
library(ggplot2)
library(oilabs)
library(openintro)
library(DT)
library(plotly)
library(ggrepel)
# Chunk 2
poverty <- read.delim("poverty.txt", header = TRUE) %>% select(-Percent)
head(poverty, 15)
# Chunk 3
qplot(x = Poverty, y = Graduates, data = poverty)
# Chunk 4
datatable(poverty, rownames = FALSE, options = list(pageLength = 6))
(pov_plot <- qplot(x = Poverty, y = Graduates, data = poverty) +
#  geom_text(aes(label = State), hjust = -0.05, vjust = 1.4, size = 3))
geom_text_repel(label = State))
(pov_plot <- qplot(x = Poverty, y = Graduates, data = poverty) +
#  geom_text(aes(label = State), hjust = -0.05, vjust = 1.4, size = 3))
geom_text_repel(aes(label = State)))
install.packages("rgl")
install.packages("rgl", repos = "http://cran.rstudio.com")
install.packages("DAAG")
install.packages("rglwidget")
x <- c(1, 10, 100, 1000)
y <- 2^x
df <- data.frame(x, y)
qplot(x, y, data = df)
# Chunk 1: setup
library(knitr)
library(rglwidget)
options(digits=3, width=100)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(rgl)
knit_hooks$set(webgl = hook_webgl)
library(dplyr)
library(ggplot2)
library(oilabs)
library(openintro)
library(plotly)
x <- c(1, 10, 100, 1000)
y <- 2^x
df <- data.frame(x, y)
qplot(x, y, data = df)
?seq
x <- seq(from = 1, to = 10, by = 1)
y <- 2^x
df <- data.frame(x, y)
qplot(x, y, data = df)
x <- seq(from = 1, to = 20, by = 1)
y <- 2^x
df <- data.frame(x, y)
qplot(x, y, data = df)
x <- seq(from = 1, to = 20, by = 1)
y <- 2^x
df <- data.frame(x, y)
qplot(x, y, data = df)
qplot(log(x), log(y), data = df)
x <- seq(from = 1, to = 30, by = 1)
y <- 2^x
df <- data.frame(x, y)
qplot(x, y, data = df)
qplot(log(x), log(y), data = df)
x <- seq(from = 1, to = 50, by = 1)
y <- 2^x
df <- data.frame(x, y)
qplot(x, y, data = df)
qplot(log(x), log(y), data = df)
x <- seq(from = 1, to = 100, by = 1)
y <- 2^x
df <- data.frame(x, y)
qplot(x, y, data = df)
qplot(log(x), log(y), data = df)
x <- c(seq(from = 1, to = 100, by = 1), 500, 1000)
y <- 2^x
df <- data.frame(x, y)
qplot(x, y, data = df)
qplot(log(x), log(y), data = df)
x <- c(seq(from = 1, to = 100, by = 1), 500, 1000)
y <- 2^x
df <- data.frame(x, y)
qplot(x, y, data = df)
x <- c(seq(from = 1, to = 100, by = 1), 200, 300)
y <- 2^x
df <- data.frame(x, y)
qplot(x, y, data = df)
qplot(log(x), log(y), data = df)
?log
x <- c(seq(from = 1, to = 100, by = 5), 200, 300); y <- 2^x
df <- data.frame(x, y)
qplot(x, y, data = df)
x <- c(seq(from = 1, to = 100, by = 10), 200, 300); y <- 2^x
df <- data.frame(x, y)
qplot(x, y, data = df)
qplot(x, log2(y), data = df)
x <- c(seq(from = 1, to = 100, by = 10), 200, 300, 500); y <- 2^x
df <- data.frame(x, y)
qplot(x, y, data = df)
x <- c(seq(from = 1, to = 100, by = 10), 200, 300, 500, 750); y <- 2^x
df <- data.frame(x, y)
qplot(x, y, data = df)
x <- c(seq(from = 1, to = 100, by = 10), 200, 300, 500, 600); y <- 2^x
df <- data.frame(x, y)
qplot(x, y, data = df)
x <- c(seq(from = 1, to = 100, by = 10), 200, 300, 500); y <- 2^x + rnorm(1)
df <- data.frame(x, y)
qplot(x, y, data = df)
qplot(x, log2(y), data = df)
library(openintro)
COL <- c('#55000088','#225588')
set.seed(238)
n <- c(50, 25, 78, 55, 70, 150)
m <- c(12, -4, 7, -19, 0, 40)
xr <- list(0.3, c(2), 1.42, runif(4,1.45,1.55), 5.78, -0.6)
yr <- list(-4, c(-8), 19, c(-17,-20,-21,-19), 12, -23.2)
i <- 1
x <- runif(n[i])
y <- m[i]*x + rnorm(n[i])
x <- c(x,xr[[i]])
y <- c(y,yr[[i]])
par(mar=c(4,4,1,1), las=1, mgp=c(2.5,0.5,0), cex.lab = 1.25, cex.axis = 1.25, mfrow = c(2,1))
lmPlot(x, y, col = COL[2], lCol = COL[1], lwd = 3)
library(faraway)
data(star)
par(mar=c(4,4,2,1), las=1, mgp=c(2.5,0.7,0), cex.lab = 1.25, cex.axis = 1.25)
plot(light ~ temp, data = star, pch=19, col=COL[2], xlab = "log(temp)", ylab = "log(light intensity)")
library(faraway)
data(star)
qplot(light ~ temp, data = star, xlab = "log(temp)", ylab = "log(light intensity)")
library(faraway)
data(star)
qplot(y = light, x = temp, data = star, xlab = "log(temp)", ylab = "log(light intensity)")
qplot(y = 2^light, x = 2^temp, data = star, xlab = "temp", ylab = "light intensity")
library(faraway)
data(star)
qplot(y = light, x = temp, data = star, xlab = "log(temp)", ylab = "log(light intensity)")
qplot(y = e^light, x = e^temp, data = star, xlab = "temp", ylab = "light intensity")
qplot(y = exp(light), x = exp(temp), data = star, xlab = "temp", ylab = "light intensity")
qplot(y = exp(light), x = exp(temp), data = star, xlab = "temp", ylab = "light intensity") +
scale_y_continuous(breaks = seq(0, 550, 50)) +
scale_x_continuous(breaks = seq(0, 550, 50))
qplot(y = exp(light), x = exp(temp), data = star, xlab = "temp", ylab = "light intensity") +
scale_y_continuous(breaks = seq(0, 550, 20)) +
scale_x_continuous(breaks = seq(0, 550, 20))
library(faraway)
data(star)
qplot(y = light, x = temp, data = star, xlab = "log(temp)", ylab = "log(light intensity)")
qplot(y = exp(light), x = exp(temp), data = star, xlab = "temp", ylab = "light intensity") +
scale_y_continuous(breaks = seq(0, 550, 20)) +
scale_x_continuous(breaks = seq(0, 550, 20))
qplot(y = 2^light, x = 2^temp, data = star, xlab = "temp", ylab = "light intensity") +
scale_y_continuous(breaks = seq(0, 550, 20)) +
scale_x_continuous(breaks = seq(0, 550, 20))
qplot(y = exp(light), x = exp(temp), data = star, xlab = "temp", ylab = "light intensity") +
scale_y_continuous(breaks = seq(0, 550, 20)) +
scale_x_continuous(breaks = seq(0, 550, 20))
qplot(y = exp(light), x = exp(temp), data = star, xlab = "temp", ylab = "light intensity") +
scale_y_continuous(breaks = seq(0, 550, 20)) +
scale_x_continuous(breaks = seq(0, 550, 20)) +
coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE)
library(faraway)
data(star)
qplot(y = light, x = temp, data = star, xlab = "log(temp)", ylab = "log(light intensity)") +
coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE)
qplot(y = exp(light), x = exp(temp), data = star, xlab = "temp", ylab = "light intensity") +
scale_y_continuous(breaks = seq(0, 550, 20)) +
scale_x_continuous(breaks = seq(0, 550, 20)) +
coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE)
library(faraway)
data(star)
qplot(y = light, x = temp, data = star, xlab = "log(temp)", ylab = "log(light intensity)") +
coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE)
library(faraway)
data(star)
qplot(y = light, x = temp, data = star, xlab = "log(temp)", ylab = "log(light intensity)") +
coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE)
library(faraway)
data(star)
qplot(y = light, x = temp, data = star, xlab = "log(temp)", ylab = "log(light intensity)") +
coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE)
# Chunk 1: setup
library(knitr)
library(rglwidget)
options(digits=3, width=100)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(rgl)
knit_hooks$set(webgl = hook_webgl)
library(dplyr)
library(ggplot2)
library(oilabs)
library(openintro)
library(plotly)
# Chunk 2: getdata
library(DAAG)
data(allbacks)
books <- allbacks[, c(3, 1, 4)]
# Chunk 3
m2 <- lm(weight ~ volume + cover, data = books)
summary(m2)$coef
qt(.025, df = nrow(books) - 3)
# Chunk 4
qplot(x = volume, y = weight, color = cover, data = books) +
geom_abline(intercept = m2$coef[1], slope = m2$coef[2], col = 2) +
geom_abline(intercept = m2$coef[1] + m2$coef[3], slope = m2$coef[2], col = 4)
# Chunk 5
qplot(x = volume, y = weight, color = cover, data = books) +
stat_smooth(method = "lm", se = FALSE)
# Chunk 6
m3 <- lm(weight ~ volume + cover + volume:cover, data = books)
summary(m3)
qplot(x = .fitted, y = .stdresid, data = m3)
qplot(sample = .stdreside, data = m3)
qplot(sample = .stdresid, data = m3) + geom_abline()
qplot(sample = .stdresid, data = m3) + geom_abline(col = "purple")
# Chunk 1: opts
knitr::opts_chunk$set(eval = TRUE, fig.width = 9, fig.height = 3)
# Chunk 2: load-data
library(oilabs)
library(dplyr)
library(ggplot2)
data(evals)
# Chunk 3
qplot(x = score, data = evals, binwidth = 0.1, color = I("white"))
summary(evals$score)
# Chunk 4
qplot(x = language, y = bty_avg, data = evals, geom = "boxplot")
# Chunk 5
qplot(x = rank, fill = gender, data = evals, geom = "bar")
# Chunk 6: scatter-score-bty_avg
qplot(x = bty_avg, y = score, data = evals, geom = "point")
# Chunk 7
qplot(x = bty_avg, y = score, data = evals, geom = "point") + geom_jitter()
# Chunk 8
m_bty <- lm(score ~ bty_avg, data = evals)
summary(m_bty)
# Chunk 9
qplot(x = .fitted, y = .stdresid, data = m_bty) + geom_jitter()
qplot(sample = .stdresid, data = m_bty) + geom_abline()
# Chunk 10: scatter-score-bty_avg_gender
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
summary(m_bty_gen)
# Chunk 11
qplot(x = .fitted, y = .stdresid, data = m_bty_gen) + geom_jitter()
qplot(sample = .stdresid, data = m_bty_gen) + geom_abline()
?nyc
str(email)
# where did this data come from / how was it collected?
str(email)
# where did this data come from / how was it collected?
?email
?datasets
library(help = "datasets")
data(email)
??email
?datasets::email
?openintro::email
qplot(x = winner, fill = factor(spam), data = email,
ylab = "proportion") + geom_bar(position = "fill")
# Chunk 1: setup
library(knitr)
library(rglwidget)
options(digits=3, width=100)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(rgl)
knit_hooks$set(webgl = hook_webgl)
library(dplyr)
library(ggplot2)
library(oilabs)
library(openintro)
library(plotly)
# Chunk 2: getdata
nyc <- read.csv("http://andrewpbray.github.io/data/nyc.csv")
# Chunk 3
m2 <- lm(Price ~ Food + Decor + East, data = nyc)
summary(m2)
# Chunk 4
m3 <- lm(Price ~ Food + Decor + East + Decor:East, data = nyc)
summary(m3)
# Chunk 5
colvec <- rep("steelblue", dim(nyc)[1])
colvec[nyc$East == 1] <- "orange"
plot3d(x = nyc$Food, y = nyc$Decor, z = nyc$Price, col = colvec,
xlab = "Food rating", ylab = "Decor Rating", zlab = "Price")
coefs <- m3$coef
rgl.viewpoint(zoom = .7)
planes3d(coefs["Food"], coefs["Decor"], -1, coefs["(Intercept)"],
alpha = 0.4, col = "steelblue")
planes3d(coefs["Food"], coefs["Decor"] + coefs["Decor:East"], -1,
coefs["(Intercept)"] + coefs["East"], alpha = 0.4, col = "orange")
# Chunk 6
library(openintro)
head(email)
# where did this data come from / how was it collected?
qplot(x = winner, fill = factor(spam), data = email,
ylab = "proportion") + geom_bar(position = "fill")
qplot(x = winner, fill = factor(spam), data = email,
ylab = "proportion") + geom_bar()
qplot(x = winner, fill = factor(spam), data = email,
ylab = "proportion", geom = "bar")
View(email)
?email
qplot(x = log(num_char), col = factor(spam), data = email, geom = "density")
# Chunk 1: setup
library(knitr)
library(rglwidget)
options(digits=3, width=100)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(rgl)
knit_hooks$set(webgl = hook_webgl)
library(dplyr)
library(ggplot2)
library(oilabs)
library(openintro)
library(plotly)
# Chunk 2: getdata
library(DAAG)
data(allbacks)
books <- allbacks[, c(3, 1, 4)]
m2 <- lm(weight ~ volume + cover, data = books)
qplot(x = volume, y = weight, color = cover, data = books) +
geom_abline(intercept = m2$coef[1], slope = m2$coef[2], col = 2) +
geom_abline(intercept = m2$coef[1] + m2$coef[3], slope = m2$coef[2], col = 4)
qplot(x = volume, y = weight, color = cover, data = books) +
stat_smooth(method = "lm", se = FALSE)
m3 <- lm(weight ~ volume + cover + volume:cover, data = books)
summary(m3)
# Chunk 1: setup
library(knitr)
library(rglwidget)
options(digits=3, width=100)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(rgl)
knit_hooks$set(webgl = hook_webgl)
library(dplyr)
library(ggplot2)
library(oilabs)
library(openintro)
library(plotly)
# Chunk 2: getdata
library(DAAG)
data(allbacks)
books <- allbacks[, c(3, 1, 4)]
# Chunk 3: parallel_lines_plot
m2 <- lm(weight ~ volume + cover, data = books)
qplot(x = volume, y = weight, color = cover, data = books) +
geom_abline(intercept = m2$coef[1], slope = m2$coef[2], col = 2) +
geom_abline(intercept = m2$coef[1] + m2$coef[3], slope = m2$coef[2], col = 4)
# Chunk 4: diff_slopes_plot
qplot(x = volume, y = weight, color = cover, data = books) +
stat_smooth(method = "lm", se = FALSE)
# Chunk 5: interaction_model
m3 <- lm(weight ~ volume + cover + volume:cover, data = books)
summary(m3)
# Chunk 6: m3_residual_plot
qplot(x = .fitted, y = .stdresid, data = m3)
# Chunk 7: m3_qqplot
qplot(sample = .stdresid, data = m3) + geom_abline(col = "purple")
# Chunk 8: read_nyc
nyc <- read.csv("http://andrewpbray.github.io/data/nyc.csv")
# Chunk 9: struc_nyc
head(nyc, 3)
dim(nyc)
# Chunk 10: scatter3d
library(rgl)
invisible(open3d())
rgl.viewpoint(zoom = .7)
plot3d(x = nyc$Food, y = nyc$Decor, z = nyc$Price, col = "steelblue",
xlab = "Food rating", ylab = "Decor Rating", zlab = "Price")
# Chunk 11: scatter_and_plane3d
m1 <- lm(Price ~ Food + Decor, data = nyc)
coefs <- m1$coef
#invisible(open3d())
rgl.viewpoint(zoom = .7)
planes3d(coefs["Food"], coefs["Decor"], -1, coefs["(Intercept)"],
alpha = 0.4, col = "lightgray")
# Chunk 12: contin_fit
head(nyc, 3)
m1 <- lm(Price ~ Food + Decor, data = nyc)
# Chunk 13: summary_m1
summary(m1)
rgl.viewpoint(zoom = .7)
m1 <- lm(Price ~ Food + Decor, data = nyc)
coefs <- m1$coef
planes3d(coefs["Food"], coefs["Decor"], -1, coefs["(Intercept)"],
alpha = 0.4, col = "lightgray")
rgl.viewpoint(zoom = .7)
m1 <- lm(Price ~ Food + Decor, data = nyc)
coefs <- m1$coef
planes3d(coefs["Food"], coefs["Decor"], -1, coefs["(Intercept)"],
alpha = 0.4, col = "lightgray")
# Chunk 1: setup
library(knitr)
library(rglwidget)
options(digits=3, width=100)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(rgl)
knit_hooks$set(webgl = hook_webgl)
library(dplyr)
library(ggplot2)
library(oilabs)
library(openintro)
library(plotly)
# Chunk 2: getdata
library(DAAG)
data(allbacks)
books <- allbacks[, c(3, 1, 4)]
# Chunk 3: parallel_lines_plot
m2 <- lm(weight ~ volume + cover, data = books)
qplot(x = volume, y = weight, color = cover, data = books) +
geom_abline(intercept = m2$coef[1], slope = m2$coef[2], col = 2) +
geom_abline(intercept = m2$coef[1] + m2$coef[3], slope = m2$coef[2], col = 4)
# Chunk 4: diff_slopes_plot
qplot(x = volume, y = weight, color = cover, data = books) +
stat_smooth(method = "lm", se = FALSE)
# Chunk 5: interaction_model
m3 <- lm(weight ~ volume + cover + volume:cover, data = books)
summary(m3)
# Chunk 6: m3_residual_plot
qplot(x = .fitted, y = .stdresid, data = m3)
# Chunk 7: m3_qqplot
qplot(sample = .stdresid, data = m3) + geom_abline(col = "purple")
# Chunk 8: read_nyc
nyc <- read.csv("http://andrewpbray.github.io/data/nyc.csv")
# Chunk 9: struc_nyc
head(nyc, 3)
dim(nyc)
# Chunk 10: scatter3d
library(rgl)
invisible(open3d())
rgl.viewpoint(zoom = .7)
plot3d(x = nyc$Food, y = nyc$Decor, z = nyc$Price, col = "steelblue",
xlab = "Food rating", ylab = "Decor Rating", zlab = "Price")
# Chunk 11: scatter_and_plane3d
m1 <- lm(Price ~ Food + Decor, data = nyc)
coefs <- m1$coef
#invisible(open3d())
rgl.viewpoint(zoom = .7)
planes3d(coefs["Food"], coefs["Decor"], -1, coefs["(Intercept)"],
alpha = 0.4, col = "lightgray")
# Chunk 12: contin_fit
head(nyc, 3)
m1 <- lm(Price ~ Food + Decor, data = nyc)
# Chunk 13: summary_m1
summary(m1)
rgl.viewpoint(zoom = .7)
m1 <- lm(Price ~ Food + Decor, data = nyc)
coefs <- m1$coef
planes3d(coefs["Food"], coefs["Decor"], -1, coefs["(Intercept)"],
alpha = 0.4, col = "lightgray")
purl("12B.Rmd", "12B.R")
getwd()
purl("/slides/12/12B.Rmd", "/slides/12/12B.R")
purl("slides/12/12B.Rmd", "slides/12/12B.R")
purl("slides/12/12B.Rmd", "slides/12/12B.R")
purl("slides/12/12B.Rmd", "slides/12/12B.R")
nyc <- read.csv("http://andrewpbray.github.io/data/nyc.csv")
View(nyc)
shiny::runGitHub("K-Means_Tutorial_App","deanyoung")
(0.2863)/0.0686
?intersect
mtcars$model <- rownames(mtcars)
first <- mtcars[1:20, ]
second <- mtcars[10:32, ]
intersect(first, second)
